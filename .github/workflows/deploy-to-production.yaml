name: ðŸ”¥ Deploy to Production.

on:
  # This is here for manual trigger if the release workflow fails. It will be removed once the release workflow is working correctly
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  pull-requests: write

jobs:
  build-and-deploy:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID || '580359070243' }}
      AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
      DOCS_S3_HOSTING_BUCKET: ${{ vars.DOCS_S3_HOSTING_BUCKET || 'docs.kobiton.com' }}
      DOCS_CLOUDFRONT_ID: ${{ vars.DOCS_CLOUDFRONT_ID || 'EUD71SB42OFL1' }}
      WIDGET_S3_HOSTING_BUCKET: ${{ vars.WIDGET_S3_HOSTING_BUCKET || 'widget.kobiton.com' }}
      WIDGET_CLOUDFRONT_ID: ${{ vars.WIDGET_CLOUDFRONT_ID || 'E2JIGAHT81K3UG' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Node.js 16
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y curl python3 python3-pip python-is-python3 python3-venv
          npm install -g yarn

      - name: Yarn test/build
        run: |
          yarn install
          yarn build

      - name: Configure AWS credentials from PRODUCTION account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-action-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to PRODUCTION environment
        run: |
          aws s3 sync ./build/docs s3://${{ env.DOCS_S3_HOSTING_BUCKET }}
          aws cloudfront create-invalidation --distribution-id ${{ env.DOCS_CLOUDFRONT_ID }} --paths "/*"
          echo "Docs is deployed!"
          aws s3 sync ./build/widget s3://${{ env.WIDGET_S3_HOSTING_BUCKET }}
          aws cloudfront create-invalidation --distribution-id ${{ env.WIDGET_CLOUDFRONT_ID }} --paths "/*"
          echo "Widget is deployed!"
